#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP085_U.h>
#include "dht.h"
#define dht_apin 8 // Analog Pin sensor is connected to
#define arduino_dhtpin 10
dht DHT; //initialise the dht11
dht ArduinoDHT;
int LDRpin = A0;
String commands[] = 
{"get-primary-temp",
"get-secondary-temp",
"get-sunlight",
"get-primary-humidity",
"help",
"diagnostics",
"get-arduino-temp",
"get-arduino-humidity"
};

String inputString = "";         // a String to hold incoming data
bool stringComplete = false;  // whether the string is complete
Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085);

void setup() {
  // initialize serial:
  Serial.begin(9600);
   
  bmp.begin();
  // reserve 200 bytes for the inputString:
  inputString.reserve(200);


}

void loop() {
 if (stringComplete) {
 inputString = "";
   stringComplete = false;
   // displaySensorDetails();
                    }
}

int sunlightTest(){
   for (int i=0; i <20; i++){

          Serial.println(analogRead(LDRpin));
          delay(500);
   }

}
void readTemp(){
    float temperature;
    bmp.getTemperature(&temperature);
    Serial.println(temperature)+"\n";
}

int dhtTempRead(){
  DHT.read11(dht_apin);

  return DHT.temperature;
}

int avgTemp(){
  int avg =0;
  int reading=0;
  for (int j=0; j <10; j++){
  delay(6000);
  DHT.read11(dht_apin);
  reading = reading +  DHT.temperature;
  }

//gets a probably innaccurate 1 minute average  
  avg = reading/10;
  return avg;
}


int readArduinoTemp(){
  ArduinoDHT.read11(dht_apin);

  return ArduinoDHT.temperature;
}

int readArduinoHumidity(){
  ArduinoDHT.read11(dht_apin);

  return ArduinoDHT.humidity;
}


int dhtHumidityRead(){
  DHT.read11(dht_apin);

  return DHT.humidity;
}

void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    inputString += inChar;
//todo: remove/clean up

if (inputString == "get-primary-temp"){
readTemp();
//reads temp from BMP180 moduule
}
if (inputString == "get-secondary-temp"){
Serial.println(dhtTempRead());
//reads forom dht11 
}
if (inputString == "get-sunlight"){
 Serial.println(analogRead(LDRpin));
    }
    if (inputString == "get-primary-humidity"){
    Serial.println(dhtHumidityRead());
    //reads forom dht11 
    }
            if (inputString =="diagnostics"){
              displaySensorDetails();
              sunlightTest();
            }
                if (inputString =="help"){
                   for(int i = 0; i<7; i++){
                Serial.println(commands[i]);
                   }
                }
                      if (inputString =="get-arduino-temp"){
                        Serial.println(readArduinoTemp());
                        //reads forom dht11 in the Arduino case
                   }
                       if (inputString =="get-arduino-humidity"){
                       Serial.println(readArduinoHumidity());
                       //reads forom dht11 in the Arduino case
                   }
                      if (inputString =="get-average"){
                       Serial.println(avgTemp());
                     
                   }
                   
    
    if (inChar == '\n') {
      stringComplete = true;
    }
  }
}
void displaySensorDetails(void)
{
  sensor_t sensor;
  bmp.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" hPa");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" hPa");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" hPa");  
  Serial.println("------------------------------------");
  Serial.println("");
  delay(500);
}
